{"id": "add_fix", "prompt": "The following function is supposed to add two numbers, but it has a bug. Please correct the implementation.\n\ndef add(a, b):\n    return a - b\n", "response_a": "def add(a, b):\n    return a + b\n", "response_b": "def add(a, b):\n    return a * b\n", "winner": "A", "explanation": "A fixes subtraction to addition; B multiplies instead of adding."}
{"id": "factorial_fix", "prompt": "The function should compute factorial(n) for non-negative integers.\nIt currently returns the wrong base case. Fix it.\n\ndef factorial(n):\n    if n == 0:\n        return 0  # BUG: factorial(0) should be 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n", "response_a": "def factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n", "response_b": "def factorial(n):\n    # Incorrect: multiplies only up to n-1\n    if n == 0:\n        return 0\n    result = 1\n    for i in range(1, n):\n        result *= i\n    return result\n", "winner": "A", "explanation": "A uses the correct base case and loop; B keeps the wrong base case and loops to n-1."}
{"id": "palindrome_fix", "prompt": "The function should return True if a string is a palindrome ignoring case and spaces.\nFix the implementation.\n\ndef is_palindrome(s):\n    # BUG: no normalization and compares wrong slices\n    return s == s[::-2]\n", "response_a": "def is_palindrome(s):\n    t = ''.join(c.lower() for c in s if not c.isspace())\n    return t == t[::-1]\n", "response_b": "def is_palindrome(s):\n    # Incorrect: always returns False for non-empty strings\n    return False if s else True\n", "winner": "A", "explanation": "A normalizes and reverses correctly; B is a placeholder and wrong."}
{"id": "fibonacci_fix", "prompt": "The function should return the nth Fibonacci number (0-indexed: fib(0)=0, fib(1)=1).\nFix the logic.\n\ndef fib(n):\n    # BUG: returns n-1\n    return n - 1\n", "response_a": "def fib(n):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n", "response_b": "def fib(n):\n    # Incorrect: returns n+1 for all n\n    return n + 1\n", "winner": "A", "explanation": "A iteratively computes Fibonacci; B is a wrong constant-time hack."}
{"id": "average_fix", "prompt": "The function should compute the arithmetic mean of a non-empty list of numbers.\nFix the division bug.\n\ndef average(nums):\n    total = sum(nums)\n    # BUG: divides by len(nums)-1\n    return total / (len(nums) - 1)\n", "response_a": "def average(nums):\n    if not nums:\n        raise ValueError(\"nums must be non-empty\")\n    total = sum(nums)\n    return total / len(nums)\n", "response_b": "def average(nums):\n    # Incorrect: returns total instead of mean\n    return sum(nums)\n", "winner": "A", "explanation": "A divides by len(nums) and validates input; B returns the sum, not the average."}
